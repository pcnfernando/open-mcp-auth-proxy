worker_processes auto;
error_log /dev/stderr notice;
pid /tmp/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format debug_detailed '$remote_addr - $remote_user [$time_local] '
                             '"$request_method $request_uri $server_protocol" '
                             '$status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent" '
                             'origin="$http_origin" '
                             'host="$http_host" '
                             'scheme="$scheme" '
                             'detected_proto="$detected_proto" '
                             'request_time=$request_time '
                             'upstream_response_time=$upstream_response_time '
                             'upstream_status=$upstream_status '
                             'upstream_addr=$upstream_addr';

    access_log /dev/stdout debug_detailed;

    # Temporary file paths for readonly filesystem
    client_body_temp_path /tmp/nginx-temp/client_temp;
    proxy_temp_path       /tmp/nginx-temp/proxy_temp;
    fastcgi_temp_path     /tmp/nginx-temp/fastcgi_temp;
    uwsgi_temp_path       /tmp/nginx-temp/uwsgi_temp;
    scgi_temp_path        /tmp/nginx-temp/scgi_temp;

    # Upstream for the Go auth proxy
    upstream auth_proxy {
        server 127.0.0.1:8081;
        keepalive 32;
    }

    # Protocol detection logic
    map $http_x_forwarded_proto $detected_proto {
        default "https";  # Default to HTTPS in cloud environments
        "http"  "http";
        "https" "https";
        ""      "https";  # If no header, assume HTTPS
    }

    # Alternative: detect based on port
    map $server_port $port_based_proto {
        default "http";
        "443"   "https";
        "8443"  "https";
        "80"    "http";
        "8080"  "http";
    }

    # Use the detected protocol or fall back to HTTPS
    map $scheme $final_proto {
        default $detected_proto;
        "https" "https";
        "http"  $detected_proto;
    }

    server {
        listen 8080;
        server_name _;

        # Set environment-based variables
        set $cloud_env "true";
        set $force_https "true";

        # Enable gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # Add CORS headers to ALL responses
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, mcp-protocol-version, Origin, Accept, X-Requested-With, Cache-Control, Content-Language, Expires, Last-Modified, Pragma" always;
        add_header Access-Control-Max-Age "86400" always;
        add_header Vary "Origin" always;

        # OAuth endpoints
        location ~ ^/(\.well-known/oauth-authorization-server|authorize|token|register)$ {
            # Handle OPTIONS first
            if ($request_method = OPTIONS) {
                return 204;
            }
            
            # Debug headers
            add_header X-Debug-Location "oauth_endpoints" always;
            add_header X-Debug-Upstream "auth_proxy" always;
            add_header X-Debug-URI $request_uri always;
            add_header X-Debug-Detected-Proto $detected_proto always;
            add_header X-Debug-Final-Proto $final_proto always;
            
            proxy_pass http://auth_proxy$request_uri;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # CRITICAL: Force HTTPS in cloud environment
            proxy_set_header X-Forwarded-Proto "https";
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Cloud-Environment "true";
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Everything else - MCP paths and other requests
        location / {
            # Handle OPTIONS first
            if ($request_method = OPTIONS) {
                return 204;
            }
            
            # Debug headers
            add_header X-Debug-Location "catch_all" always;
            add_header X-Debug-Upstream "auth_proxy" always;
            add_header X-Debug-URI $request_uri always;
            add_header X-Debug-Detected-Proto $detected_proto always;
            add_header X-Debug-Final-Proto $final_proto always;
            
            proxy_pass http://auth_proxy$request_uri;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $final_proto;
            proxy_set_header X-Forwarded-Host $host;
            
            # For SSE connections
            proxy_buffering off;
            proxy_cache off;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 30s;
            chunked_transfer_encoding off;
        }

        # Health check endpoints
        location /nginx-health {
            add_header Content-Type text/plain always;
            return 200 "nginx ok\n";
        }
    }
}