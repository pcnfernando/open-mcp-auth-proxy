user nginx;
worker_processes auto;
error_log /tmp/nginx-logs/error.log notice;
pid /tmp/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /tmp/nginx-logs/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Temporary file paths for readonly filesystem
    client_body_temp_path /tmp/nginx-temp/client_temp;
    proxy_temp_path       /tmp/nginx-temp/proxy_temp;
    fastcgi_temp_path     /tmp/nginx-temp/fastcgi_temp;
    uwsgi_temp_path       /tmp/nginx-temp/uwsgi_temp;
    scgi_temp_path        /tmp/nginx-temp/scgi_temp;

    # Upstream for the Go auth proxy
    upstream auth_proxy {
        server 127.0.0.1:8081;
        keepalive 32;
    }

    # Map for CORS origins
    map $http_origin $cors_origin {
        default "";
        ~^https?://(.*\.)?choreoapis\.dev$ $http_origin;
        ~^https?://(.*\.)?choreoapps\.dev$ $http_origin;
        ~^https?://localhost(:[0-9]+)?$ $http_origin;
        ~^https?://127\.0\.0\.1(:[0-9]+)?$ $http_origin;
    }

    server {
        listen 8080;
        server_name _;

        # Enable gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # Security headers
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # CORS headers for all responses
        add_header Access-Control-Allow-Origin $cors_origin always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, mcp-protocol-version" always;
        add_header Vary "Origin" always;

        # Handle preflight OPTIONS requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # OAuth endpoints that MCP clients expect at root domain
        # Dynamic proxy using nginx variables - handles the specific Choreo path structure
        location ~ ^/(\.well-known/oauth-authorization-server|authorize|token|register)$ {
            # Use nginx variable to construct the upstream URL dynamically
            proxy_pass http://auth_proxy$request_uri;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Remove any conflicting CORS headers from upstream
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
        }

        # Handle the Choreo-specific path structure
        # /my-integrations/auth-proxy-service/v1.0/* -> /*
        location /my-integrations/auth-proxy-service/v1.0/ {
            # Remove the Choreo prefix when forwarding
            rewrite ^/my-integrations/auth-proxy-service/v1.0/(.*) /$1 break;
            
            proxy_pass http://auth_proxy;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # For SSE connections - disable buffering
            proxy_buffering off;
            proxy_cache off;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            chunked_transfer_encoding off;
            
            # Remove X-Accel-Buffering header if set by upstream
            proxy_hide_header X-Accel-Buffering;
            
            # Remove conflicting CORS headers from upstream
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
        }

        # Exact match for the Choreo path (redirect to trailing slash)
        location = /my-integrations/auth-proxy-service/v1.0 {
            return 301 $scheme://$host/my-integrations/auth-proxy-service/v1.0/;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://auth_proxy/health;
            proxy_set_header Host $host;
            access_log off;
        }

        # Fallback for any other requests
        location / {
            return 404;
        }
    }
}