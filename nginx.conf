# Enhanced nginx.conf with comprehensive debug logging
worker_processes auto;
# Set error log to notice level (debug requires special nginx build)
error_log /dev/stderr notice;
pid /tmp/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Comprehensive debug log format with all headers and variables
    log_format debug_detailed '$remote_addr - $remote_user [$time_local] '
                             '"$request_method $request_uri $server_protocol" '
                             '$status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent" '
                             'origin="$http_origin" '
                             'cors_origin="$cors_origin" '
                             'host="$http_host" '
                             'x_forwarded_for="$http_x_forwarded_for" '
                             'x_forwarded_proto="$http_x_forwarded_proto" '
                             'x_forwarded_host="$http_x_forwarded_host" '
                             'request_time=$request_time '
                             'upstream_response_time=$upstream_response_time '
                             'upstream_status=$upstream_status '
                             'upstream_addr=$upstream_addr '
                             'acao_sent="$sent_http_access_control_allow_origin" '
                             'acac_sent="$sent_http_access_control_allow_credentials" '
                             'acam_sent="$sent_http_access_control_allow_methods" '
                             'acah_sent="$sent_http_access_control_allow_headers" '
                             'content_type="$sent_http_content_type" '
                             'connection="$http_connection" '
                             'upgrade="$http_upgrade" '
                             'cache_control="$sent_http_cache_control"';

    # Send access log to stdout with debug format
    access_log /dev/stdout debug_detailed;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Temporary file paths for readonly filesystem
    client_body_temp_path /tmp/nginx-temp/client_temp;
    proxy_temp_path       /tmp/nginx-temp/proxy_temp;
    fastcgi_temp_path     /tmp/nginx-temp/fastcgi_temp;
    uwsgi_temp_path       /tmp/nginx-temp/uwsgi_temp;
    scgi_temp_path        /tmp/nginx-temp/scgi_temp;

    # Upstream for the Go auth proxy with detailed logging
    upstream auth_proxy {
        server 127.0.0.1:8081;
        keepalive 32;
    }

    # Enhanced map for CORS origins with debug logging
    map $http_origin $cors_origin {
        default "*";  # Temporarily allow all for debugging
        "" "*";       # Handle case where no origin header is sent
        ~^https?://(.*\.)?choreoapis\.dev$ $http_origin;
        ~^https?://(.*\.)?choreoapps\.dev$ $http_origin;
        ~^https?://localhost(:[0-9]+)?$ $http_origin;
        ~^https?://127\.0\.0\.1(:[0-9]+)?$ $http_origin;
        # Add catch-all for debugging - allow any origin
        ~^.*$ $http_origin;
    }

    # Map to log which location block is matched
    map $request_uri $location_matched {
        default "fallback";
        ~^/(\.well-known/oauth-authorization-server|authorize|token|register)$ "oauth_endpoints";
        ~^/.*$ "catch_all";
    }

    server {
        listen 8080;
        server_name _;

        # Add debug headers to see what nginx is doing
        add_header X-Debug-Location $location_matched always;
        add_header X-Debug-Origin $http_origin always;
        add_header X-Debug-CORS-Origin $cors_origin always;
        add_header X-Debug-Host $http_host always;
        add_header X-Debug-Request-ID $request_id always;

        # Enable gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        # CORS headers for all responses (temporarily permissive for debugging)
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, mcp-protocol-version, Origin, Accept, X-Requested-With" always;
        add_header Vary "Origin" always;

        # Enhanced preflight OPTIONS handling with debug
        location @handle_options {
            add_header X-Debug-Preflight "handled" always;
            add_header X-Debug-Origin $http_origin always;
            add_header X-Debug-CORS-Origin $cors_origin always;
            add_header Access-Control-Allow-Origin $cors_origin always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, mcp-protocol-version, Origin, Accept, X-Requested-With" always;
            add_header Access-Control-Max-Age 3600 always;
            add_header Vary "Origin" always;
            return 204;
        }

        # Handle OPTIONS requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }

        # OAuth endpoints that MCP clients expect at root domain
        # These are the ONLY endpoints that need special handling
        location ~ ^/(\.well-known/oauth-authorization-server|authorize|token|register)$ {
            # Debug logging for this location
            access_log /dev/stdout debug_detailed;
            
            # Add debug headers
            add_header X-Debug-Location "oauth_endpoints" always;
            add_header X-Debug-Upstream "auth_proxy" always;
            add_header X-Debug-URI $request_uri always;
            
            # Handle OPTIONS for this location
            if ($request_method = 'OPTIONS') {
                add_header X-Debug-Preflight "oauth_endpoints" always;
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, mcp-protocol-version, Origin, Accept, X-Requested-With" always;
                add_header Access-Control-Max-Age 3600 always;
                add_header Vary "Origin" always;
                return 204;
            }
            
            proxy_pass http://auth_proxy$request_uri;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Debug-Nginx-Location "oauth_endpoints";
            
            # Proxy timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Remove any conflicting CORS headers from upstream
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            
            # Log proxy details
            proxy_set_header X-Debug-Proxy-Pass "oauth_endpoints";
        }

        # Everything else - proxy directly to the Go app without modification
        # This includes /my-integrations/auth-proxy-service/v1.0/sse and all other paths
        location / {
            # Debug logging for this location
            access_log /dev/stdout debug_detailed;
            
            # Add debug headers
            add_header X-Debug-Location "catch_all" always;
            add_header X-Debug-Upstream "auth_proxy" always;
            add_header X-Debug-URI $request_uri always;
            add_header X-Debug-Full-URI $scheme://$http_host$request_uri always;
            
            # Handle OPTIONS for this location
            if ($request_method = 'OPTIONS') {
                add_header X-Debug-Preflight "catch_all" always;
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Content-Type, mcp-protocol-version, Origin, Accept, X-Requested-With" always;
                add_header Access-Control-Max-Age 3600 always;
                add_header Vary "Origin" always;
                return 204;
            }
            
            proxy_pass http://auth_proxy$request_uri;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Debug-Nginx-Location "catch_all";
            
            # For SSE connections - disable buffering
            proxy_buffering off;
            proxy_cache off;
            proxy_set_header Connection '';
            proxy_http_version 1.1;
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 30s;
            chunked_transfer_encoding off;
            
            # Remove conflicting CORS headers from upstream
            proxy_hide_header Access-Control-Allow-Origin;
            proxy_hide_header Access-Control-Allow-Credentials;
            proxy_hide_header Access-Control-Allow-Methods;
            proxy_hide_header Access-Control-Allow-Headers;
            
            # Log proxy details
            proxy_set_header X-Debug-Proxy-Pass "catch_all";
        }

        # Health check endpoint for debugging
        location /nginx-health {
            access_log /dev/stdout debug_detailed;
            add_header Content-Type text/plain always;
            add_header X-Debug-Health "ok" always;
            return 200 "nginx ok\n";
        }

        # Status endpoint for debugging
        location /nginx-status {
            access_log /dev/stdout debug_detailed;
            add_header Content-Type application/json always;
            add_header X-Debug-Status "ok" always;
            return 200 '{"status":"ok","server":"nginx","timestamp":"$time_iso8601","request_id":"$request_id"}';
        }
    }
}